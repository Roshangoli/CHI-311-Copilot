
# backend/agents/validator.py
from .tools import AgentTools, Prediction

# Define acceptable thresholds
MIN_CONFIDENCE_THRESHOLD = 0.60 # Don'''t show predictions with less than 60% confidence

class ValidatorAgent:
    """
    An agent that validates the outputs of other agents or tools before they are sent
    to the user. It acts as a safety layer to prevent hallucinations and ensure quality.
    """

    def __init__(self, tool_client: AgentTools):
        """
        Initializes the agent with a client to re-query tools for validation.

        Args:
            tool_client: A class that implements the AgentTools protocol.
        """
        self.tools = tool_client

    def validate_prediction(self, sr_number: str, initial_prediction: Prediction) -> tuple[bool, str]:
        """
        Validates an ETA prediction by re-querying the tool and checking for consistency
        and quality.

        Args:
            sr_number: The service request number.
            initial_prediction: The prediction object generated by the primary agent/tool.

        Returns:
            A tuple containing:
            - bool: True if the prediction is valid, False otherwise.
            - str: A reason for the validation failure, or an empty string if valid.
        """
        print(f"Validator: Validating prediction for {sr_number}")

        # Rule 1: Check confidence score
        if initial_prediction['confidence'] < MIN_CONFIDENCE_THRESHOLD:
            reason = f"Confidence ({initial_prediction['confidence']:.0%}) is below threshold ({MIN_CONFIDENCE_THRESHOLD:.0%})."
            print(f"Validation FAILED: {reason}")
            return False, reason

        # Rule 2: Re-query the tool to check for major discrepancies (e.g., race condition)
        # TODO: R2 to add retry logic and more robust comparison.
        try:
            validation_prediction = self.tools.predict_eta(sr_number)
        except Exception as e:
            reason = f"Failed to re-query prediction tool for validation: {e}"
            print(f"Validation FAILED: {reason}")
            return False, reason

        # Compare key fields. For dates/numbers, allow a small tolerance.
        if initial_prediction['eta_date'] != validation_prediction['eta_date']:
            reason = f"ETA date mismatch during validation: {initial_prediction['eta_date']} vs {validation_prediction['eta_date']}."
            print(f"Validation FAILED: {reason}")
            return False, reason

        print(f"Validation PASSED for {sr_number}")
        return True, ""

# Example Usage (how the Resident Agent might use the Validator)
#
# resident_agent = ResidentAgent(tool_client)
# validator_agent = ValidatorAgent(tool_client)
#
# prediction = resident_agent.tools.predict_eta("SR12345")
# is_valid, reason = validator_agent.validate_prediction("SR12345", prediction)
#
# if is_valid:
#     # Proceed with generating the user-facing response
#     ...
# else:
#     # Return a safe, alternative response
#     # e.g., "I can see the status, but am unable to provide a reliable ETA at this time."
#     ...
